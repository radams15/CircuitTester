/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.1.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */
#ifndef SWIG_MNA_WRAP_H_
#define SWIG_MNA_WRAP_H_


#ifndef SWIGIMPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGDLLIMPORT
#   else
#     define SWIGDLLIMPORT __declspec(dllimport)
#   endif
# else
#   define SWIGDLLIMPORT
# endif
# define SWIGIMPORT extern SWIGDLLIMPORT
#endif

#include <stddef.h>


typedef struct SwigObj SwigObj;

#include <stdbool.h>
typedef struct SwigObj_SWIG_CException SWIG_CException;

typedef struct SwigObj_CompVector CompVector;

typedef struct SwigObj_MNACircuit MNACircuit;

typedef struct SWIGTYPE_p_std__vectorT_int_t SWIGTYPE_p_std__vectorT_int_t;

typedef struct SWIGTYPE_p_std__vectorT_Term_p_t SWIGTYPE_p_std__vectorT_Term_p_t;

typedef struct SwigObj_MNASolution MNASolution;

typedef struct SWIGTYPE_p_std__mapT_int_double_std__lessT_int_t_t SWIGTYPE_p_std__mapT_int_double_std__lessT_int_t_t;

typedef struct SWIGTYPE_p_std__mapT_int_double_std__lessT_int_t_t SWIGTYPE_p_std__mapT_int_double_std__lessT_int_t_t;

typedef struct SWIGTYPE_p_std__mapT_int_double_std__lessT_int_t_t SWIGTYPE_p_std__mapT_int_double_std__lessT_int_t_t;

enum ElementType {
  MNA_BATTERY,
  MNA_RESISTOR
};

typedef struct SwigObj_MNAComponent MNAComponent;

#ifdef __cplusplus
extern "C" {
#endif

SWIGIMPORT int SWIG_CException_code_get(SWIG_CException* carg1);

SWIGIMPORT char * SWIG_CException_msg_get(SWIG_CException* carg1);

SWIGIMPORT void MNA_SWIG_PendingException_reset();

SWIGIMPORT SWIG_CException* MNA_SWIG_PendingException_get();

SWIGIMPORT CompVector* CompVector_new();

SWIGIMPORT CompVector* CompVector_copy(CompVector* carg1);

SWIGIMPORT size_t CompVector_size(CompVector* carg1);

SWIGIMPORT size_t CompVector_capacity(CompVector* carg1);

SWIGIMPORT void CompVector_reserve(CompVector* carg1, size_t carg2);

SWIGIMPORT bool CompVector_empty(CompVector* carg1);

SWIGIMPORT void CompVector_clear(CompVector* carg1);

SWIGIMPORT void CompVector_push_back(CompVector* carg1, MNAComponent* carg2);

SWIGIMPORT MNAComponent* CompVector_get(CompVector* carg1, int carg2);

SWIGIMPORT void CompVector_set(CompVector* carg1, int carg2, MNAComponent* carg3);

SWIGIMPORT void CompVector_delete(CompVector* carg1);

SWIGIMPORT MNACircuit* MNACircuit_new(CompVector* carg1);

SWIGIMPORT MNASolution* MNACircuit_solve(MNACircuit* carg1);

SWIGIMPORT SWIGTYPE_p_std__vectorT_int_t* MNACircuit_getConnectedNodes(MNACircuit* carg1, int carg2);

SWIGIMPORT SWIGTYPE_p_std__vectorT_Term_p_t* MNACircuit_getCurrents(MNACircuit* carg1, int carg2, int carg3);

SWIGIMPORT void MNACircuit_delete(MNACircuit* carg1);

SWIGIMPORT void MNASolution_voltageMap_set(MNASolution* carg1, SWIGTYPE_p_std__mapT_int_double_std__lessT_int_t_t* carg2);

SWIGIMPORT SWIGTYPE_p_std__mapT_int_double_std__lessT_int_t_t* MNASolution_voltageMap_get(MNASolution* carg1);

SWIGIMPORT void MNASolution_elements_set(MNASolution* carg1, CompVector* carg2);

SWIGIMPORT CompVector* MNASolution_elements_get(MNASolution* carg1);

SWIGIMPORT MNASolution* MNASolution_new(SWIGTYPE_p_std__mapT_int_double_std__lessT_int_t_t* carg1, CompVector* carg2);

SWIGIMPORT bool MNASolution_equals(MNASolution* carg1, MNASolution* carg2);

SWIGIMPORT double MNASolution_getNodeVoltage(MNASolution* carg1, int carg2);

SWIGIMPORT double MNASolution_getVoltage(MNASolution* carg1, MNAComponent* carg2);

SWIGIMPORT double MNASolution_getCurrent(MNASolution* carg1, MNAComponent* carg2);

SWIGIMPORT void MNASolution_delete(MNASolution* carg1);

SWIGIMPORT void MNAComponent_n0_set(MNAComponent* carg1, int carg2);

SWIGIMPORT int MNAComponent_n0_get(MNAComponent* carg1);

SWIGIMPORT void MNAComponent_n1_set(MNAComponent* carg1, int carg2);

SWIGIMPORT int MNAComponent_n1_get(MNAComponent* carg1);

SWIGIMPORT void MNAComponent_value_set(MNAComponent* carg1, double carg2);

SWIGIMPORT double MNAComponent_value_get(MNAComponent* carg1);

SWIGIMPORT void MNAComponent_currentSolution_set(MNAComponent* carg1, double carg2);

SWIGIMPORT double MNAComponent_currentSolution_get(MNAComponent* carg1);

SWIGIMPORT void MNAComponent_type_set(MNAComponent* carg1, int carg2);

SWIGIMPORT int MNAComponent_type_get(MNAComponent* carg1);

SWIGIMPORT MNAComponent* MNAComponent_new(int carg1, int carg2, int carg3, double carg4);

SWIGIMPORT bool MNAComponent_contains(MNAComponent* carg1, int carg2);

SWIGIMPORT int MNAComponent_opposite(MNAComponent* carg1, int carg2);

SWIGIMPORT bool MNAComponent_equals(MNAComponent* carg1, MNAComponent* carg2);

SWIGIMPORT void MNAComponent_delete(MNAComponent* carg1);

#ifdef __cplusplus
}
#endif


#endif /* SWIG_MNA_WRAP_H_ */
